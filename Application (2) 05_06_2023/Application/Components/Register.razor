@page "/Register";
@using Application.Models;
@using System.Text;
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop;
@inject NavigationManager Nav;





<style>
    .submit_btn {
        margin: 20px;
        border: aliceblue;
    }


    .form-group {
        margin: 10px;
        align-content: center;
        border: aliceblue;
    }

    .btn-btn-primary{
        margin: 10px;
        align-content: center;
        border: aliceblue;
        float: right;
    }

    .Captcha{
        background-color: palevioletred;
        border-radius: 0px;
        border: none;
        padding: 1rem;
        margin: 1rem;
        width: 100px;
        
        
    }
</style>
<h6>Registration Form</h6>
<button class="btn-btn-primary" @onclick="GenerateCaptcha">Refresh</button>
<EditForm Model="@register" OnInvalidSubmit="Submit">
<DataAnnotationsValidator/>
<div class="form-group">
    <label for="username">Username</label>
    <input type="text" id="username" class="form-control" @bind="@register.UserName" />
    <ValidationMessage For="()=>register.UserName" />
</div>
<div class="form-group">
    <label for="username">Password</label>
        <input type="text" id="username" class="form-control" @bind="@register.Password"  />
    <ValidationMessage For="()=>register.Password" />
</div>
    <div class="form-group">
        <label for="username">ConformPassword</label>
        <input type="text" id="username" class="form-control" @bind="@register.ConformPassword"  />
        <ValidationMessage For="()=>register.ConformPassword" />
    </div>
<div class="form-group">
    <label for="username">Email</label>
    <input type="text" id="username" class="form-control" @bind="@register.Email" />
    <ValidationMessage For="()=>register.Email" />
</div>

    <label>Captcha:</label>
    <div class="Captcha">@captchaValue</div>
    <input type="text" class="form-control" @bind-value="code" />
    <ValidationMessage For="()=>register.captcha" />
    

    @if (code == captchaValue)
    {
        <hr />
        <p class=" bg-success">@SuccessMessege</p>
    }
    else
    {
        <hr />
        <p class=" bg-warning">@ErrorMessege</p>
    }

    <button class="submit_btn" @onclick="Submit">Submit</button>
</EditForm>








@code {
    #region CTOR
    private string SuccessMessege;
    private string ErrorMessege;
    public string code { get; set; }
    public string captchaValue;
    List<Register> Result = new List<Register>();
    Form1 register = new Form1();
    #endregion
    private async Task Submit()
    {
        if (register.Password != null && code == captchaValue)
        {

            var password = register.Password;
            var UserName = register.UserName;
            Nav.NavigateTo($"/Login/{password}/{UserName}");


            Console.WriteLine("OnInvalidSubmit");
        }
        else if(code == captchaValue)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Enter Valid Captcha");
        }


    }
    protected override Task OnInitializedAsync()
    {

        // Captcha = BlazorCaptcha.Tools.GetCaptchaWord(CaptchaLetters);
        GenerateCaptcha();
        return base.OnInitializedAsync();
    }
    private void GenerateCaptcha()
    {
        const int captchaLength = 6;
        const string captchaChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var captcha = new StringBuilder();
        var random = new Random();

        for (int i = 0; i < captchaLength; i++)
        {
            captcha.Append(captchaChars[random.Next(captchaChars.Length)]);
        }

        captchaValue = captcha.ToString();
    }
    private void RefreshCaptcha()
    {
        GenerateCaptcha();
        StateHasChanged();
    }
  
}
